/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface PhoenixdConfig {
  url: string
  password: string
  socks5Proxy?: string
  acceptInvalidCerts?: boolean
  httpTimeout?: number
}
export interface PhoenixdNode {
  config: PhoenixdConfig
}
export interface Bolt11Resp {
  amountSat: number
  paymentHash: string
  serialized: string
}
export interface PhoenixPayInvoiceResp {
  amountSat: number
  routingFeeSat: number
  paymentId: string
  paymentHash: string
  preimage: string
}
export interface ClnConfig {
  url: string
  rune: string
  socks5Proxy?: string
  acceptInvalidCerts?: boolean
  httpTimeout?: number
}
export interface ClnNode {
  config: ClnConfig
}
export interface LndConfig {
  url: string
  macaroon: string
  socks5Proxy?: string
  acceptInvalidCerts?: boolean
  httpTimeout?: number
}
export interface LndNode {
  config: LndConfig
}
export interface NwcConfig {
  nwcUri: string
  socks5Proxy?: string
  httpTimeout?: number
}
export interface NwcNode {
  config: NwcConfig
}
export interface StrikeConfig {
  baseUrl?: string
  apiKey: string
  httpTimeout?: number
}
export interface StrikeNode {
  config: StrikeConfig
}
export interface BlinkConfig {
  baseUrl?: string
  apiKey: string
  httpTimeout?: number
}
export interface BlinkNode {
  config: BlinkConfig
}
export interface SpeedConfig {
  baseUrl?: string
  apiKey: string
  httpTimeout?: number
}
export interface SpeedNode {
  config: SpeedConfig
}
export const enum InvoiceType {
  Bolt11 = 'Bolt11',
  Bolt12 = 'Bolt12'
}
export interface TlvRecord {
  type: number
  value: string
}
export interface NodeInfo {
  alias: string
  color: string
  pubkey: string
  network: string
  blockHeight: number
  blockHash: string
  sendBalanceMsat: number
  receiveBalanceMsat: number
  feeCreditBalanceMsat: number
  unsettledSendBalanceMsat: number
  unsettledReceiveBalanceMsat: number
  pendingOpenSendBalance: number
  pendingOpenReceiveBalance: number
}
export interface Transaction {
  type: string
  invoice: string
  description: string
  descriptionHash: string
  preimage: string
  paymentHash: string
  amountMsats: number
  feesPaid: number
  createdAt: number
  expiresAt: number
  settledAt: number
  payerNote?: string
  externalId?: string
}
export interface NodeConnectionInfo {
  pubkey: string
  address: string
  port: number
}
export interface Channel {
  localBalance: number
  localSpendableBalance: number
  remoteBalance: number
  id: string
  remotePubkey: string
  fundingTxId: string
  fundingTxVout: number
  active: boolean
  public: boolean
  internalChannel: string
  confirmations: number
  confirmationsRequired: number
  forwardingFeeBaseMsat: number
  unspendablePunishmentReserve: number
  counterpartyUnspendablePunishmentReserve: number
  error: string
  isOutbound: boolean
}
export interface NodeStatus {
  isReady: boolean
  internalNodeStatus: string
}
export interface ConnectPeerRequest {
  pubkey: string
  address: string
  port: number
}
export interface OpenChannelRequest {
  pubkey: string
  amountMsats: number
  public: boolean
}
export interface OpenChannelResponse {
  fundingTxId: string
}
export interface CloseChannelRequest {
  channelId: string
  nodeId: string
  force: boolean
}
export interface UpdateChannelRequest {
  channelId: string
  nodeId: string
  forwardingFeeBaseMsat: number
  maxDustHtlcExposureFromFeeRateMultiplier: number
}
export interface CloseChannelResponse {
  
}
export interface PendingBalanceDetails {
  channelId: string
  nodeId: string
  amountMsats: number
  fundingTxId: string
  fundingTxVout: number
}
export interface OnchainBalanceResponse {
  spendable: number
  total: number
  reserved: number
  pendingBalancesFromChannelClosures: number
  pendingBalancesDetails: Array<PendingBalanceDetails>
  internalBalances: string
}
export interface PeerDetails {
  nodeId: string
  address: string
  isPersisted: boolean
  isConnected: boolean
}
export interface LightningBalanceResponse {
  totalSpendable: number
  totalReceivable: number
  nextMaxSpendable: number
  nextMaxReceivable: number
  nextMaxSpendableMpp: number
  nextMaxReceivableMpp: number
}
export interface PayInvoiceResponse {
  paymentHash: string
  preimage: string
  feeMsats: number
}
export interface PayKeysendResponse {
  fee: number
}
export interface BalancesResponse {
  onchain: OnchainBalanceResponse
  lightning: LightningBalanceResponse
}
export interface PaymentFailedEventProperties {
  transaction: Transaction
  reason: string
}
export interface ListTransactionsParams {
  from: number
  limit: number
  paymentHash?: string
  search?: string
}
export interface LookupInvoiceParams {
  paymentHash?: string
  search?: string
}
export interface CreateInvoiceParams {
  invoiceType: InvoiceType
  amountMsats?: number
  offer?: string
  description?: string
  descriptionHash?: string
  expiry?: number
  rPreimage?: string
  isBlinded?: boolean
  isKeysend?: boolean
  isAmp?: boolean
  isPrivate?: boolean
}
export interface PayCode {
  offerId: string
  bolt12: string
  label?: string
  active?: boolean
  singleUse?: boolean
  used?: boolean
}
export interface PayInvoiceParams {
  invoice: string
  feeLimitMsat?: number
  feeLimitPercentage?: number
  timeoutSeconds?: number
  amountMsats?: number
  maxParts?: number
  firstHopPubkey?: string
  lastHopPubkey?: string
  allowSelfPayment?: boolean
  isAmp?: boolean
}
export interface OnInvoiceEventParams {
  paymentHash?: string
  search?: string
  pollingDelaySec: number
  maxPollingSec: number
}
export interface Payment {
  paymentId: string
  circId: string
  round: number
  relayFingerprint: string
  updatedAt: number
  amountMsats: number
}
export interface InvoiceEvent {
  status: string
  transaction?: Transaction
}
export declare class PhoenixdNode {
  constructor(config: PhoenixdConfig)
  getUrl(): string
  getPassword(): string
  getConfig(): PhoenixdConfig
  getInfo(): NodeInfo
  createInvoice(params: CreateInvoiceParams): Transaction
  payInvoice(params: PayInvoiceParams): PayInvoiceResponse
  getOffer(): PayCode
  lookupInvoice(params: LookupInvoiceParams): Transaction
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): PayInvoiceResponse
  listTransactions(params: ListTransactionsParams): Array<Transaction>
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
}
export declare class ClnNode {
  constructor(config: ClnConfig)
  getUrl(): string
  getRune(): string
  getConfig(): ClnConfig
  getInfo(): NodeInfo
  createInvoice(params: CreateInvoiceParams): Transaction
  payInvoice(params: PayInvoiceParams): PayInvoiceResponse
  getOffer(search?: string | undefined | null): PayCode
  listOffers(search?: string | undefined | null): Array<PayCode>
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): PayInvoiceResponse
  lookupInvoice(params: LookupInvoiceParams): Transaction
  listTransactions(params: ListTransactionsParams): Array<Transaction>
  decode(str: string): string
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
}
export declare class LndNode {
  constructor(config: LndConfig)
  getUrl(): string
  getMacaroon(): string
  getConfig(): LndConfig
  getInfo(): NodeInfo
  getInfoAsync(): Promise<NodeInfo>
  createInvoice(params: CreateInvoiceParams): Transaction
  payInvoice(params: PayInvoiceParams): PayInvoiceResponse
  getOffer(search?: string | undefined | null): PayCode
  listOffers(search?: string | undefined | null): Array<PayCode>
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): PayInvoiceResponse
  lookupInvoice(params: LookupInvoiceParams): Transaction
  listTransactions(params: ListTransactionsParams): Array<Transaction>
  decode(str: string): string
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
}
export declare class BlinkNode {
  constructor(config: BlinkConfig)
  getBaseUrl(): string
  getApiKey(): string
  getConfig(): BlinkConfig
  getInfo(): NodeInfo
  createInvoice(params: CreateInvoiceParams): Transaction
  payInvoice(params: PayInvoiceParams): PayInvoiceResponse
  getOffer(search?: string | undefined | null): PayCode
  listOffers(search?: string | undefined | null): Array<PayCode>
  lookupInvoice(params: LookupInvoiceParams): Transaction
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): PayInvoiceResponse
  listTransactions(params: ListTransactionsParams): Array<Transaction>
  decode(str: string): string
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
}
export declare class NwcNode {
  constructor(config: NwcConfig)
  getNwcUri(): string
  getSocks5Proxy(): string | null
  getConfig(): NwcConfig
  getInfo(): NodeInfo
  createInvoice(params: CreateInvoiceParams): Transaction
  payInvoice(params: PayInvoiceParams): PayInvoiceResponse
  getOffer(search?: string | undefined | null): PayCode
  listOffers(search?: string | undefined | null): Array<PayCode>
  lookupInvoice(params: LookupInvoiceParams): Transaction
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): PayInvoiceResponse
  listTransactions(params: ListTransactionsParams): Array<Transaction>
  decode(str: string): string
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
  onInvoiceEventsCancel(params: OnInvoiceEventParams): InvoiceEventsHandle
}
export declare class InvoiceEventsHandle {
  cancel(): void
  isCancelled(): boolean
  pollEvent(): InvoiceEvent | null
  waitForEvent(timeoutMs: number): InvoiceEvent | null
}
export declare class InvoiceEventsCancellation {
  cancel(): void
  isCancelled(): boolean
}
export declare class StrikeNode {
  constructor(config: StrikeConfig)
  getBaseUrl(): string
  getApiKey(): string
  getConfig(): StrikeConfig
  getInfo(): NodeInfo
  createInvoice(params: CreateInvoiceParams): Transaction
  payInvoice(params: PayInvoiceParams): PayInvoiceResponse
  getOffer(search?: string | undefined | null): PayCode
  listOffers(search?: string | undefined | null): Array<PayCode>
  lookupInvoice(params: LookupInvoiceParams): Transaction
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): PayInvoiceResponse
  listTransactions(params: ListTransactionsParams): Array<Transaction>
  decode(str: string): string
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
}
export declare class SpeedNode {
  constructor(config: SpeedConfig)
  getBaseUrl(): string
  getApiKey(): string
  getConfig(): SpeedConfig
  getInfo(): NodeInfo
  createInvoice(params: CreateInvoiceParams): Transaction
  payInvoice(params: PayInvoiceParams): PayInvoiceResponse
  getOffer(search?: string | undefined | null): PayCode
  listOffers(search?: string | undefined | null): Array<PayCode>
  lookupInvoice(params: LookupInvoiceParams): Transaction
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): PayInvoiceResponse
  listTransactions(params: ListTransactionsParams): Array<Transaction>
  decode(str: string): string
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
}
