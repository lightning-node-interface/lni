/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export declare function sayAfterWithTokio(ms: number, who: string, url: string, socks5Proxy?: string | undefined | null, headerKey?: string | undefined | null, headerValue?: string | undefined | null): Promise<string>
export declare class PhoenixdNode {
  constructor(config: PhoenixdConfig)
  getUrl(): string
  getPassword(): string
  getConfig(): PhoenixdConfig
  getInfo(): Promise<NodeInfo>
  createInvoice(params: CreateInvoiceParams): Promise<Transaction>
  payInvoice(params: PayInvoiceParams): Promise<PayInvoiceResponse>
  createOffer(params: CreateOfferParams): Promise<Offer>
  getOffer(): Promise<Offer>
  lookupInvoice(params: LookupInvoiceParams): Promise<Transaction>
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): Promise<PayInvoiceResponse>
  listTransactions(params: ListTransactionsParams): Promise<Array<Transaction>>
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
}
export declare class ClnNode {
  constructor(config: ClnConfig)
  getUrl(): string
  getRune(): string
  getConfig(): ClnConfig
  getInfo(): Promise<NodeInfo>
  createInvoice(params: CreateInvoiceParams): Promise<Transaction>
  payInvoice(params: PayInvoiceParams): Promise<PayInvoiceResponse>
  createOffer(params: CreateOfferParams): Promise<Offer>
  getOffer(search?: string | undefined | null): Promise<Offer>
  listOffers(search?: string | undefined | null): Promise<Array<Offer>>
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): Promise<PayInvoiceResponse>
  lookupInvoice(params: LookupInvoiceParams): Promise<Transaction>
  listTransactions(params: ListTransactionsParams): Promise<Array<Transaction>>
  decode(str: string): Promise<string>
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
}
export declare class LndNode {
  constructor(config: LndConfig)
  getUrl(): string
  getMacaroon(): string
  getConfig(): LndConfig
  createOffer(params: CreateOfferParams): Offer
  getOffer(search?: string | undefined | null): Promise<Offer>
  listOffers(search?: string | undefined | null): Promise<Array<Offer>>
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): Promise<PayInvoiceResponse>
  getInfo(): Promise<NodeInfo>
  createInvoice(params: CreateInvoiceParams): Promise<Transaction>
  payInvoice(params: PayInvoiceParams): Promise<PayInvoiceResponse>
  lookupInvoice(params: LookupInvoiceParams): Promise<Transaction>
  listTransactions(params: ListTransactionsParams): Promise<Array<Transaction>>
  decode(invoiceStr: string): Promise<string>
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
  getOfferAsync(search?: string | undefined | null): Promise<Offer>
  listOffersAsync(search?: string | undefined | null): Promise<Array<Offer>>
  payOfferAsync(offer: string, amountMsats: number, payerNote?: string | undefined | null): Promise<PayInvoiceResponse>
  createOfferAsync(amountMsats?: number | undefined | null, description?: string | undefined | null, expiry?: number | undefined | null): Promise<Transaction>
  fetchInvoiceFromOfferAsync(offer: string, amountMsats: number, payerNote?: string | undefined | null): Promise<string>
}
export declare class BlinkNode {
  constructor(config: BlinkConfig)
  getBaseUrl(): string
  getApiKey(): string
  getConfig(): BlinkConfig
  getInfo(): Promise<NodeInfo>
  createInvoice(params: CreateInvoiceParams): Promise<Transaction>
  payInvoice(params: PayInvoiceParams): Promise<PayInvoiceResponse>
  createOffer(params: CreateOfferParams): Promise<Offer>
  getOffer(search?: string | undefined | null): Promise<Offer>
  listOffers(search?: string | undefined | null): Promise<Array<Offer>>
  lookupInvoice(params: LookupInvoiceParams): Promise<Transaction>
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): Promise<PayInvoiceResponse>
  listTransactions(params: ListTransactionsParams): Promise<Array<Transaction>>
  decode(str: string): Promise<string>
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
}
export declare class NwcNode {
  constructor(config: NwcConfig)
  getNwcUri(): string
  getSocks5Proxy(): string | null
  getConfig(): NwcConfig
  getInfo(): Promise<NodeInfo>
  createInvoice(params: CreateInvoiceParams): Promise<Transaction>
  payInvoice(params: PayInvoiceParams): Promise<PayInvoiceResponse>
  createOffer(params: CreateOfferParams): Promise<Offer>
  getOffer(search?: string | undefined | null): Promise<Offer>
  listOffers(search?: string | undefined | null): Promise<Array<Offer>>
  lookupInvoice(params: LookupInvoiceParams): Promise<Transaction>
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): Promise<PayInvoiceResponse>
  listTransactions(params: ListTransactionsParams): Promise<Array<Transaction>>
  decode(str: string): Promise<string>
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
}
export declare class StrikeNode {
  constructor(config: StrikeConfig)
  getBaseUrl(): string
  getApiKey(): string
  getConfig(): StrikeConfig
  getInfo(): Promise<NodeInfo>
  createInvoice(params: CreateInvoiceParams): Promise<Transaction>
  payInvoice(params: PayInvoiceParams): Promise<PayInvoiceResponse>
  createOffer(params: CreateOfferParams): Offer
  lookupInvoice(params: LookupInvoiceParams): Promise<Transaction>
  listTransactions(params: ListTransactionsParams): Promise<Array<Transaction>>
  getOffer(search?: string | undefined | null): Offer
  listOffers(search?: string | undefined | null): Array<Offer>
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): PayInvoiceResponse
  decode(str: string): string
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
}
export declare class SpeedNode {
  constructor(config: SpeedConfig)
  getBaseUrl(): string
  getApiKey(): string
  getConfig(): SpeedConfig
  getInfo(): Promise<NodeInfo>
  createInvoice(params: CreateInvoiceParams): Promise<Transaction>
  payInvoice(params: PayInvoiceParams): Promise<PayInvoiceResponse>
  createOffer(params: CreateOfferParams): Promise<Offer>
  getOffer(search?: string | undefined | null): Promise<Offer>
  listOffers(search?: string | undefined | null): Promise<Array<Offer>>
  lookupInvoice(params: LookupInvoiceParams): Promise<Transaction>
  payOffer(offer: string, amountMsats: number, payerNote?: string | undefined | null): Promise<PayInvoiceResponse>
  listTransactions(params: ListTransactionsParams): Promise<Array<Transaction>>
  decode(str: string): Promise<string>
  onInvoiceEvents(params: OnInvoiceEventParams, callback: (arg0: string, arg1?: Transaction | undefined | null) => void): void
}
