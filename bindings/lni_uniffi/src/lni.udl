namespace lni {};

dictionary PhoenixdConfig {
    string url;
    string password;
    string? socks5_proxy;
    boolean? accept_invalid_certs;
};

interface PhoenixdNode {
    constructor(PhoenixdConfig config);

    [Throws=ApiError, Async]
    NodeInfo get_info();

    [Throws=ApiError, Async]
    Transaction create_invoice(CreateInvoiceParams params);

    [Throws=ApiError, Async]
    PayInvoiceResponse pay_invoice(PayInvoiceParams params);

    [Throws=ApiError, Async]
    PayCode get_offer();

    [Throws=ApiError, Async]
    Transaction lookup_invoice(string payment_hash);

    [Throws=ApiError, Async]
    sequence<Transaction> list_transactions(ListTransactionsParams params);

    [Throws=ApiError, Async]
    PayInvoiceResponse pay_offer(string offer, i64 amount_msats, string? payer_note );

};

dictionary ClnConfig {
    string url;
    string rune;
    string? socks5_proxy;
    boolean? accept_invalid_certs;
};

interface ClnNode {
    constructor(ClnConfig config);

    [Throws=ApiError, Async]
    NodeInfo get_info();

    [Throws=ApiError, Async]
    Transaction create_invoice(CreateInvoiceParams params);

    [Throws=ApiError, Async]
    PayInvoiceResponse pay_invoice(PayInvoiceParams params);

    [Throws=ApiError, Async]
    PayCode get_offer(string? search);

    [Throws=ApiError, Async]
    sequence<PayCode> list_offers(string? search);

    [Throws=ApiError, Async]
    PayInvoiceResponse pay_offer(string offer, i64 amount_msats, string? payer_note );

    [Throws=ApiError, Async]
    Transaction lookup_invoice(string payment_hash);

    [Throws=ApiError, Async]
    sequence<Transaction> list_transactions(ListTransactionsParams params);

    [Throws=ApiError, Async]
    string decode(string str);

};

dictionary LndConfig {
    string url;
    string macaroon;
    string? socks5_proxy;
    boolean? accept_invalid_certs;
};

interface LndNode {
    constructor(LndConfig config);

    [Throws=ApiError, Async]
    NodeInfo get_info();

    [Throws=ApiError, Async]
    Transaction create_invoice(CreateInvoiceParams params);

    [Throws=ApiError, Async]
    PayInvoiceResponse pay_invoice(PayInvoiceParams params);

    [Throws=ApiError, Async]
    PayCode get_offer(string? search);

    [Throws=ApiError, Async]
    sequence<PayCode> list_offers(string? search);

    [Throws=ApiError, Async]
    PayInvoiceResponse pay_offer(string offer, i64 amount_msats, string? payer_note );

    [Throws=ApiError, Async]
    Transaction lookup_invoice(string payment_hash);

    [Throws=ApiError, Async]
    sequence<Transaction> list_transactions(ListTransactionsParams params);

    [Throws=ApiError, Async]
    string decode(string str);

};

interface Db {
    [Throws=DbError]
    constructor(string path);

    [Throws=DbError]
    void save();

    [Throws=DbError]
    void write_payment(Payment payment);

    [Throws=DbError]
    Payment? lookup_payment(string payment_id);
};

[Error]
interface DbError {
    IoErr(string reason);
    SerializationErr(string reason);
    DeserializationErr(string reason);
};

dictionary Payment {
    string payment_id;
    string circ_id;
    i64 round;
    string relay_fingerprint;
    i64 updated_at;
    i64 amount_msats;
};

[Error]
interface ApiError {
    Http(string reason);
    Api(string reason);
    Json(string reason);
};

dictionary CreateInvoiceParams {
    InvoiceType invoice_type;
    i64? amount_msats;
    string? offer;
    string? description; 
    string? description_hash; 
    i64? expiry;
    string? r_preimage;
    boolean? is_blinded;
    boolean? is_keysend;
    boolean? is_amp;
    boolean? is_private;
};

dictionary TLVRecord {
    i64 type_;
    string value;
};

dictionary NodeInfo {
    string alias;
    string color;
    string pubkey;
    string network;
    i64 block_height;
    string block_hash;
    i64 send_balance_msat;
    i64 receive_balance_msat;
    i64 fee_credit_balance_msat;
    i64 unsettled_send_balance_msat;
    i64 unsettled_receive_balance_msat;
    i64 pending_open_send_balance;
    i64 pending_open_receive_balance;
};

dictionary Transaction {
    string type_;
    string invoice;
    string description;
    string description_hash;
    string preimage;
    string payment_hash;
    i64 amount_msats;
    i64 fees_paid;
    i64 created_at;
    i64 expires_at;
    i64 settled_at;
    string? payer_note;
    string? external_id;
};

dictionary NodeConnectionInfo {
    string pubkey;
    string address;
    i64 port;
};

dictionary Channel {
    i64 local_balance;
    i64 local_spendable_balance;
    i64 remote_balance;
    string id;
    string remote_pubkey;
    string funding_tx_id;
    i64 funding_tx_vout;
    boolean active;
    boolean public;
    string internal_channel;
    i64 confirmations;
    i64 confirmations_required;
    i64 forwarding_fee_base_msat;
    i64 unspendable_punishment_reserve;
    i64 counterparty_unspendable_punishment_reserve;
    string error;
    boolean is_outbound;
};

dictionary NodeStatus {
    boolean is_ready;
    string internal_node_status;
};

dictionary ConnectPeerRequest {
    string pubkey;
    string address;
    i64 port;
};

dictionary OpenChannelRequest {
    string pubkey;
    i64 amount_msats;
    boolean public;
};

dictionary OpenChannelResponse {
    string funding_tx_id;
};

dictionary CloseChannelRequest {
    string channel_id;
    string node_id;
    boolean force;
};

dictionary UpdateChannelRequest {
    string channel_id;
    string node_id;
    i64 forwarding_fee_base_msat;
    i64 max_dust_htlc_exposure_from_fee_rate_multiplier;
};

dictionary CloseChannelResponse {};

dictionary PendingBalanceDetails {
    string channel_id;
    string node_id;
    i64 amount_msats;
    string funding_tx_id;
    i64 funding_tx_vout;
};

dictionary OnchainBalanceResponse {
    i64 spendable;
    i64 total;
    i64 reserved;
    i64 pending_balances_from_channel_closures;
    sequence<PendingBalanceDetails> pending_balances_details;
    string internal_balances;
};

dictionary PeerDetails {
    string node_id;
    string address;
    boolean is_persisted;
    boolean is_connected;
};

dictionary LightningBalanceResponse {
    i64 total_spendable;
    i64 total_receivable;
    i64 next_max_spendable;
    i64 next_max_receivable;
    i64 next_max_spendable_mpp;
    i64 next_max_receivable_mpp;
};

dictionary PayInvoiceResponse {
    string payment_hash;
    string preimage;
    i64 fee_msats;
};

dictionary PayKeysendResponse {
    i64 fee;
};

dictionary BalancesResponse {
    OnchainBalanceResponse onchain;
    LightningBalanceResponse lightning;
};

dictionary PaymentFailedEventProperties {
    Transaction transaction;
    string reason;
};

enum InvoiceType {
    "Bolt11",
    "Bolt12",
};

dictionary ListTransactionsParams {
    i64 from;
    i64 limit;
    string? payment_hash;
};

dictionary PayCode {
    string offer_id;
    string bolt12;
    string? label;
    boolean? active;
    boolean? single_use;
    boolean? used;
};

dictionary PayInvoiceParams {
    string invoice;
    i64? fee_limit_msat;
    f64? fee_limit_percentage;
    i64? timeout_seconds;
    i64? amount_msats;
    i64? max_parts;
    string? first_hop_pubkey;
    string? last_hop_pubkey;
    boolean? allow_self_payment;
    boolean? is_amp;
};